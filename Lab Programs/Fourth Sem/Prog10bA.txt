Algorithm


Let the given set of vertices be {1, 2, 3, 4,â€¦.n}. Let us consider 1 as starting and ending point of
output. For every other vertex i (other than 1), we find the minimum cost path with 1 as the starting
point, i as the ending point and all vertices appearing exactly once. Let the cost of this path be
cost(i), the cost of corresponding Cycle would be cost(i) + dist(i, 1) where dist(i, 1) is the distance
from i to 1. Finally, we return the minimum of all [cost(i) + dist(i, 1)] values. To calculate cost(i)
using Dynamic Programming, we need to have some recursive relation in terms of sub-problems.
Let us define a term C(S, i) be the cost of the minimum cost path visiting each vertex in set S
exactly once, starting at 1 and ending at i.

We start with all subsets of size 2 and calculate C(S, i) for all subsets where S is the subset, then
we calculate C(S, i) for all subsets S of size 3 and so on. Note that 1 must be present in every
subset.

If size of S is 2, then S must be {1, i},
C(S, i) = dist(1, i)
Else if size of S is greater than 2.
C(S, i) = min { C(S-{i}, j) + dis(j, i)} where j belongs to S, j != i and
j!=1.
