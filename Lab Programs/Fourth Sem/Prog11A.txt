 Algorithm:
• accept n: no of items in set
• accept their values, sk in increasing order
• accept d: sum of subset desired
• initialize x[i] = -1 for all i
• check if solution possible or not
• if possible then call SumOfSub(0,1,sum of all elements)
 SumOfSub (s, k, r)
//Values of x[ j ], 1 <= j < k, have been determined
//Node creation at level k taking place: also call for creation at level K+1 if possible
// s = sum of 1 to k-1 elements and r is sum of k to n elements
//generating left child that means including k in solution
• Set x[k] = 1 
• If (s + s[k] = d) then subset found, print solution
• If (s + s[k] + s[k+1] <=d)
 then SumOfSum (s + s[k], k+1, r – s[k])
//Generate right child i.e. element k absent
• If (s + r - s[k] >=d) AND (s + s[k+1] )<=d
THEN { x[k]=0;
 SumOfSub(s, k+1, r – s[k]) 
