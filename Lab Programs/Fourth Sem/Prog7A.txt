//Djikstra's Algorithm
// Input: A weighted connected graph G ={V,E}, source s
// Output dv: the distance-vertex matrix
• Read number of vertices of graph G
• Read weighted graph G
• Print weighted graph
• Initialize distance from source for all vertices as weight between source node and other
vertices, i, and none in tree
// initial condition
• For all other vertices,
dv[i] = wt_graph[s,i], TV[i]=0, prev[i]=0
dv[s] = 0, prev[s] = s // source vertex
• Repeat for y = 1 to n
v = next vertex with minimum dv value, by calling FindNextNear()
Add v to tree.
For all the adjacent u of v and u is not added to the tree,
 if dv[u]> dv[v] + wt_graph[v,u]
  then dv[u]= dv[v] + wt_graph[v,u] and prev[u]=v. 

 findNextNear
//Input: graph, dv matrix
//Output: j the next nearest vertex
 o minm = 9999
 o For k =1 to n
  if k vertex is not selected in tree and
   if dv[k] < minm
   { minm = dv [ k]
    j=k
   }
o return j 
