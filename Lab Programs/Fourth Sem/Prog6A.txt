"""Pseudo Code"""

Step 1: Start


Step 2: Create Swap function.
void Swap(int []arr, int i, int j)
    1.Swap the numbers arr[i] and arr[j]


Step 3: Create Sort function.
void SortThree(int weights[], int values[], int valueByWeights[])
    1. Sort weights, values and valueByWeights using reference as valueByWeights.
    2. Sort in descending order of valueByWeights.


Step 4: Create Knapsack Greedy function.
float KnapsackGreedy(int weights[], int[] values, int threshold, int sackWeights[])
    1. Create valueByWeights array.
    2. Call the SortThree function.
    3. Pick the first "threshold" amount of pieces.
    4. Store the value of pieces picked in sackWeights.
    5. Return the total value of the sack.


Step 5: Create Knapsack DP function.
int KnapsackDP(int [][] arr, int [] weights , int [] values , int i, int j)
    1. If arr[i][j] != 0
        Then return arr[i][j]
    2. If i = 0 or j = 0
        Then return 0
    3. If j < weights[i]
        arr[i][j] = KnapsackDP(arr,weights,values,i-1,j)
    4 Else
        arr[i][j] = Max(KnapsackDP(arr,weights,values,i-1,j),
                values[i] + KnapsackDP(arr, weights, values, i-1, j-weights[i]))
    5. Return arr[i][j]


Step 6: Create FindSackWeights function.
void FindSackWeights(int [][] arr, int [] weights , int [] values , int i, int j, int sackWeights[])
    1. Function to pick the weights in the sack.
    2. If arr[i][j] = arr[i-1][j]
        Call for values i - 1 and j
    3. Else
        Increment sackWeights[i]
        Call for values i - 1 and j - weights[i]


Step 7: Create main function
    1. Take input
    2. Call Knapsack DP and Greedy Functions.
    3. Display output.
